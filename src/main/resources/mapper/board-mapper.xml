<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace="Board": 이 매퍼의 고유 네임스페이스. BoardRepository에서 호출할 때 "Board.쿼리ID"로 사용됨. -->
<mapper namespace="Board">

    <!-- 게시글을 데이터베이스에 저장하는 쿼리 -->
    <!-- id="save": BoardRepository.save()에서 호출되는 쿼리 -->
    <!-- parameterType="board": 입력 파라미터는 BoardDTO (mybatis-config.xml에서 "board"로 별칭 설정됨) -->
    <!-- useGeneratedKeys="true" keyProperty="id": DB에서 생성된 id를 BoardDTO의 id 필드에 자동 설정 -->
    <insert id="save" parameterType="board" useGeneratedKeys="true" keyProperty="id">
        insert into board_table(boardTitle, boardWriter, boardPass, boardContents, fileAttached, category_id)
        values(#{boardTitle}, #{boardWriter}, #{boardPass}, #{boardContents}, #{fileAttached}, #{categoryId})
        <!-- category_id 필드 추가 -->
    </insert>

    <!-- 모든 게시글 목록을 조회하는 쿼리 -->
    <!-- id="findAll": BoardRepository.findAll()에서 호출 -->
    <!-- resultType="board": 결과를 BoardDTO로 매핑 -->
    <select id="findAll" resultType="board">
        SELECT b.id, b.boardTitle, b.boardWriter, b.boardHits,
        date_format(b.createdAt, "%Y-%m-%d") as createdAt,
        b.fileAttached, b.category_id as categoryId,
        c.category_name as categoryName
        FROM board_table b
        LEFT JOIN category c ON b.category_id = c.category_id
        ORDER BY b.id DESC
        <!-- 카테고리 정보를 JOIN으로 가져오도록 수정 -->
    </select>

    <!-- 카테고리별 게시글 목록을 조회하는 쿼리 추가 -->
    <select id="findByCategory" parameterType="Long" resultType="board">
        SELECT b.id, b.boardTitle, b.boardWriter, b.boardHits,
        date_format(b.createdAt, "%Y-%m-%d") as createdAt,
        b.fileAttached, b.category_id as categoryId,
        c.category_name as categoryName
        FROM board_table b
        LEFT JOIN category c ON b.category_id = c.category_id
        WHERE b.category_id = #{categoryId}
        ORDER BY b.id DESC
        <!-- 특정 카테고리의 게시글만 조회 -->
    </select>

    <!-- 게시글 조회수를 증가시키는 쿼리 -->
    <!-- id="updateHits": BoardRepository.updateHits()에서 호출 -->
    <!-- parameterType="Long": 입력 파라미터는 게시글 ID (Long 타입) -->
    <update id="updateHits" parameterType="Long">
        update board_table set boardHits=boardHits+1 where id=#{id}
        <!-- boardHits를 1 증가시키고, 특정 id에 해당하는 레코드만 업데이트 -->
    </update>

    <!-- 특정 게시글의 상세 정보를 조회하는 쿼리 -->
    <!-- id="findById": BoardRepository.findById()에서 호출 -->
    <!-- parameterType="Long": 입력 파라미터는 게시글 ID -->
    <!-- resultType="board": 결과를 BoardDTO로 매핑 -->
    <select id="findById" parameterType="Long" resultType="board">
        SELECT b.id, b.boardTitle, b.boardWriter, b.boardPass, b.boardContents, b.boardHits,
        date_format(b.createdAt, "%Y-%m-%d %H:%i:%s") as createdAt,
        b.fileAttached, b.category_id as categoryId,
        c.category_name as categoryName
        FROM board_table b
        LEFT JOIN category c ON b.category_id = c.category_id
        WHERE b.id = #{id}
        <!-- 카테고리 정보를 JOIN으로 가져오도록 수정 -->
    </select>

    <!-- 게시글을 수정하는 쿼리 -->
    <!-- id="update": BoardRepository.update()에서 호출 -->
    <!-- parameterType 생략: BoardDTO가 기본적으로 사용됨 -->
    <update id="update">
        UPDATE board_table
        SET boardTitle = #{boardTitle},
        boardContents = #{boardContents},
        category_id = #{categoryId}
        WHERE id = #{id}
        <!-- 카테고리 ID도 업데이트할 수 있도록 수정 -->
    </update>

    <!-- 게시글을 삭제하는 쿼리 -->
    <!-- id="delete": BoardRepository.delete()에서 호출 -->
    <!-- parameterType="Long": 입력 파라미터는 게시글 ID -->
    <delete id="delete" parameterType="Long">
        delete from board_table where id=#{id}
        <!-- 특정 id의 게시글을 삭제 -->
    </delete>

    <!-- 첨부 파일 정보를 데이터베이스에 저장하는 쿼리 -->
    <!-- id="saveFile": BoardRepository.saveFile()에서 호출 -->
    <!-- parameterType="boardFile": 입력 파라미터는 BoardFileDTO -->
    <insert id="saveFile" parameterType="boardFile">
        insert into board_file_table(originalFileName, storedFileName, boardId)
        values (#{originalFileName}, #{storedFileName}, #{boardId})
        <!-- 파일의 원본 이름, 저장 이름, 연결된 게시글 ID를 저장 -->
    </insert>

    <!-- 특정 게시글에 연결된 파일 목록을 조회하는 쿼리 -->
    <!-- id="findFile": BoardRepository.findFile()에서 호출 -->
    <!-- parameterType="Long": 입력 파라미터는 게시글 ID -->
    <!-- resultType="boardFile": 결과를 BoardFileDTO로 매핑 -->
    <select id="findFile" parameterType="Long" resultType="boardFile">
        select * from board_file_table where boardId = #{id}
        <!-- boardId로 특정 게시글의 모든 첨부 파일을 조회 -->
    </select>

    <!-- 검색 조건에 따른 게시글 목록 조회 -->
    <select id="search" parameterType="com.dukefirstboard.board.dto.SearchDTO" resultType="board">
        SELECT b.id, b.boardTitle, b.boardWriter, b.boardHits,
        date_format(b.createdAt, "%Y-%m-%d") as createdAt,
        b.fileAttached, b.category_id as categoryId,
        c.category_name as categoryName
        FROM board_table b
        LEFT JOIN category c ON b.category_id = c.category_id
        WHERE 1=1
        <!-- 검색 조건에 따라 다른 WHERE 절 적용 -->
        <if test="searchType != null and searchType != '' and searchKeyword != null and searchKeyword != ''">
            <choose>
                <when test="searchType == 'title'">
                    AND b.boardTitle LIKE CONCAT('%', #{searchKeyword}, '%')
                </when>
                <when test="searchType == 'content'">
                    AND b.boardContents LIKE CONCAT('%', #{searchKeyword}, '%')
                </when>
                <when test="searchType == 'writer'">
                    AND b.boardWriter LIKE CONCAT('%', #{searchKeyword}, '%')
                </when>
                <when test="searchType == 'titleAndContent'">
                    AND (b.boardTitle LIKE CONCAT('%', #{searchKeyword}, '%')
                    OR b.boardContents LIKE CONCAT('%', #{searchKeyword}, '%'))
                </when>
            </choose>
        </if>
        <!-- 카테고리 필터링 (선택적) -->
        <if test="categoryId != null and categoryId > 0">
            AND b.category_id = #{categoryId}
        </if>
        ORDER BY b.id DESC
    </select>

    <!-- 전체 게시글 수 조회 쿼리 -->
    <select id="countAll" resultType="long">
        SELECT COUNT(*) FROM board_table
    </select>

    <!-- 카테고리별 게시글 수 조회 쿼리 -->
    <select id="countByCategory" parameterType="Long" resultType="long">
        SELECT COUNT(*) FROM board_table WHERE category_id = #{categoryId}
    </select>

    <!-- 검색 조건에 따른 게시글 수 조회 쿼리 -->
    <select id="countBySearch" parameterType="com.dukefirstboard.board.dto.SearchDTO" resultType="long">
        SELECT COUNT(*) FROM board_table b
        LEFT JOIN category c ON b.category_id = c.category_id
        WHERE 1=1
        <!-- 검색 조건에 따라 다른 WHERE 절 적용 -->
        <if test="searchType != null and searchType != '' and searchKeyword != null and searchKeyword != ''">
            <choose>
                <when test="searchType == 'title'">
                    AND b.boardTitle LIKE CONCAT('%', #{searchKeyword}, '%')
                </when>
                <when test="searchType == 'content'">
                    AND b.boardContents LIKE CONCAT('%', #{searchKeyword}, '%')
                </when>
                <when test="searchType == 'writer'">
                    AND b.boardWriter LIKE CONCAT('%', #{searchKeyword}, '%')
                </when>
                <when test="searchType == 'titleAndContent'">
                    AND (b.boardTitle LIKE CONCAT('%', #{searchKeyword}, '%')
                    OR b.boardContents LIKE CONCAT('%', #{searchKeyword}, '%'))
                </when>
            </choose>
        </if>
        <!-- 카테고리 필터링 (선택적) -->
        <if test="categoryId != null and categoryId > 0">
            AND b.category_id = #{categoryId}
        </if>
    </select>

    <!-- 게시글 목록 페이징 조회 쿼리 -->
    <select id="findAllWithPaging" parameterType="com.dukefirstboard.board.dto.PageDTO" resultType="board">
        SELECT b.id, b.boardTitle, b.boardWriter, b.boardHits,
               date_format(b.createdAt, "%Y-%m-%d") as createdAt,
               b.fileAttached, b.category_id as categoryId,
               c.category_name as categoryName
        FROM board_table b
                 LEFT JOIN category c ON b.category_id = c.category_id
        ORDER BY b.id DESC
        LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 카테고리별 게시글 목록 페이징 조회 쿼리 -->
    <select id="findByCategoryWithPaging" parameterType="map" resultType="board">
        SELECT b.id, b.boardTitle, b.boardWriter, b.boardHits,
               date_format(b.createdAt, "%Y-%m-%d") as createdAt,
               b.fileAttached, b.category_id as categoryId,
               c.category_name as categoryName
        FROM board_table b
                 LEFT JOIN category c ON b.category_id = c.category_id
        WHERE b.category_id = #{categoryId}
        ORDER BY b.id DESC
        LIMIT #{page.size} OFFSET #{page.offset}
    </select>

    <!-- 검색 조건에 따른 게시글 목록 페이징 조회 쿼리 -->
    <select id="searchWithPaging" parameterType="map" resultType="board">
        SELECT b.id, b.boardTitle, b.boardWriter, b.boardHits,
        date_format(b.createdAt, "%Y-%m-%d") as createdAt,
        b.fileAttached, b.category_id as categoryId,
        c.category_name as categoryName
        FROM board_table b
        LEFT JOIN category c ON b.category_id = c.category_id
        WHERE 1=1
        <!-- 검색 조건에 따라 다른 WHERE 절 적용 -->
        <if test="search.searchType != null and search.searchType != '' and search.searchKeyword != null and search.searchKeyword != ''">
            <choose>
                <when test="search.searchType == 'title'">
                    AND b.boardTitle LIKE CONCAT('%', #{search.searchKeyword}, '%')
                </when>
                <when test="search.searchType == 'content'">
                    AND b.boardContents LIKE CONCAT('%', #{search.searchKeyword}, '%')
                </when>
                <when test="search.searchType == 'writer'">
                    AND b.boardWriter LIKE CONCAT('%', #{search.searchKeyword}, '%')
                </when>
                <when test="search.searchType == 'titleAndContent'">
                    AND (b.boardTitle LIKE CONCAT('%', #{search.searchKeyword}, '%')
                    OR b.boardContents LIKE CONCAT('%', #{search.searchKeyword}, '%'))
                </when>
            </choose>
        </if>
        <!-- 카테고리 필터링 (선택적) -->
        <if test="search.categoryId != null and search.categoryId > 0">
            AND b.category_id = #{search.categoryId}
        </if>
        ORDER BY b.id DESC
        LIMIT #{page.size} OFFSET #{page.offset}
    </select>
</mapper>