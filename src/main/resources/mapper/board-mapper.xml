<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace="Board": 이 매퍼의 고유 네임스페이스. BoardRepository에서 호출할 때 "Board.쿼리ID"로 사용됨. -->
<mapper namespace="Board">

    <!-- 게시글을 데이터베이스에 저장하는 쿼리 -->
    <!-- id="save": BoardRepository.save()에서 호출되는 쿼리 -->
    <!-- parameterType="board": 입력 파라미터는 BoardDTO (mybatis-config.xml에서 "board"로 별칭 설정됨) -->
    <!-- useGeneratedKeys="true" keyProperty="id": DB에서 생성된 id를 BoardDTO의 id 필드에 자동 설정 -->
    <insert id="save" parameterType="board" useGeneratedKeys="true" keyProperty="id">
        insert into board_table(boardTitle, boardWriter, boardPass, boardContents, fileAttached)
        values(#{boardTitle}, #{boardWriter}, #{boardPass}, #{boardContents}, #{fileAttached})
    </insert>

    <!-- 모든 게시글 목록을 조회하는 쿼리 -->
    <!-- id="findAll": BoardRepository.findAll()에서 호출 -->
    <!-- resultType="board": 결과를 BoardDTO로 매핑 -->
    <select id="findAll" resultType="board">
        select id, boardTitle, boardWriter, boardHits, date_format(createdAt, "%Y-%m-%d") as createdAt
        from board_table order by id desc
        <!-- 날짜 형식을 "YYYY-MM-DD"로 변환, 최신 게시글부터 정렬 -->
    </select>

    <!-- 게시글 조회수를 증가시키는 쿼리 -->
    <!-- id="updateHits": BoardRepository.updateHits()에서 호출 -->
    <!-- parameterType="Long": 입력 파라미터는 게시글 ID (Long 타입) -->
    <update id="updateHits" parameterType="Long">
        update board_table set boardHits=boardHits+1 where id=#{id}
        <!-- boardHits를 1 증가시키고, 특정 id에 해당하는 레코드만 업데이트 -->
    </update>

    <!-- 특정 게시글의 상세 정보를 조회하는 쿼리 -->
    <!-- id="findById": BoardRepository.findById()에서 호출 -->
    <!-- parameterType="Long": 입력 파라미터는 게시글 ID -->
    <!-- resultType="board": 결과를 BoardDTO로 매핑 -->
    <select id="findById" parameterType="Long" resultType="board">
        select id, boardTitle, boardWriter, boardPass, boardContents, boardHits,
        date_format(createdAt, "%Y-%m-%d %H:%i:%s") as createdAt, fileAttached
        from board_table where id=#{id}
        <!-- 상세 정보에 필요한 모든 필드를 조회, 날짜는 "YYYY-MM-DD HH:MM:SS" 형식으로 변환 -->
    </select>

    <!-- 게시글을 수정하는 쿼리 -->
    <!-- id="update": BoardRepository.update()에서 호출 -->
    <!-- parameterType 생략: BoardDTO가 기본적으로 사용됨 -->
    <update id="update">
        update board_table set boardTitle=#{boardTitle}, boardContents=#{boardContents} where id=#{id}
        <!-- 제목과 내용을 업데이트, id로 특정 레코드 식별 -->
    </update>

    <!-- 게시글을 삭제하는 쿼리 -->
    <!-- id="delete": BoardRepository.delete()에서 호출 -->
    <!-- parameterType="Long": 입력 파라미터는 게시글 ID -->
    <delete id="delete" parameterType="Long">
        delete from board_table where id=#{id}
        <!-- 특정 id의 게시글을 삭제 -->
    </delete>

    <!-- 첨부 파일 정보를 데이터베이스에 저장하는 쿼리 -->
    <!-- id="saveFile": BoardRepository.saveFile()에서 호출 -->
    <!-- parameterType="boardFile": 입력 파라미터는 BoardFileDTO -->
    <insert id="saveFile" parameterType="boardFile">
        insert into board_file_table(originalFileName, storedFileName, boardId)
        values (#{originalFileName}, #{storedFileName}, #{boardId})
        <!-- 파일의 원본 이름, 저장 이름, 연결된 게시글 ID를 저장 -->
    </insert>

    <!-- 특정 게시글에 연결된 파일 목록을 조회하는 쿼리 -->
    <!-- id="findFile": BoardRepository.findFile()에서 호출 -->
    <!-- parameterType="Long": 입력 파라미터는 게시글 ID -->
    <!-- resultType="boardFile": 결과를 BoardFileDTO로 매핑 -->
    <select id="findFile" parameterType="Long" resultType="boardFile">
        select * from board_file_table where boardId = #{id}
        <!-- boardId로 특정 게시글의 모든 첨부 파일을 조회 -->
    </select>
</mapper>